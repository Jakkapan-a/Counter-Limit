
// -------------------- Display -----------------------
void UpdateLCD() {

  switch (display) {
    case Home:
      DisplayHome();
      break;
    case Settings:
      DisplaySettings();
      break;
    default:
      display = Home;
      break;
  }
}
int digitResistor = 0;
int oldDigitResistor = 0;

int GetDigit(float input) {
  if (input < 10)
    return 1;
  if (input < 100)
    return 2;
  if (input < 1000)
    return 3;
  if (input < 10000)
    return 4;
  if (input < 100000)
    return 6;
  return 7;
}

String GetUnit(float input) {
  if (input > 1000.0 && input < 1000000.0) {
    return String(input / 1000.0, 2) + "k";
  } else if (input >= 1000000.0) {
    return String(input / 1000000.0, 2) + "M";
  }
  return String(input, 2);
}


String result = "";
String oldResult = "A";
// -------------------- Display Home -----------------------
void DisplayHome() {
  if (millis() - lastTimeDisplay > 500) {
    // ---------------------------- Display Home ---------------------------------- //
    String result = CalculateResistor(R2);
    if (digitResistor != oldDigitResistor || result != oldResult) {
      lcd.clear();
      oldDigitResistor = digitResistor;
      oldResult = result;
    }

    // Serial.print("result: ");
    // Serial.print(a2d_data);
    // Serial.print(", R2: ");
    // Serial.println(R2);
    digitResistor = GetDigit(R2);

    if (R2 < 600000) {

      Serial.print("Unit: ");
      Serial.println(GetUnit(R2));

      lcd.setCursor(0, 0);
      lcd.print("R: ");
      lcd.print(GetUnit(R2));
      lcd.print("Ohm");
      lcd.setCursor(0, 1);
      lcd.print("Res :" + result);
    } else {
      lcd.setCursor(0, 0);
      lcd.print("R: ");
      lcd.print("Overload");
      lcd.print("");
      lcd.setCursor(0, 1);
      lcd.print("Res :" + result);
    }
    // ---------------------------- END Display Home ---------------------------------- //
    lastTimeDisplay = millis();
  } else if (millis() < 100) {
    lastTimeDisplay = millis();
  }
  IsChangeMenu = true;
}

bool IsRangeChange = false;
bool IsRangeReset = false;

String CalculateResistor(float input) {
  if (IsRange(input, dataProgram.MinResistance, dataProgram.MaxResistance)) {
    if (IsRangeReset == true) {
      if (dataProgram.IsBuzzer) {
        tone(BUZZER_PIN, 600, 100);
        delay(200);
        tone(BUZZER_PIN, 600, 100);
      }

      IsRangeReset = false;
    }
    ledMes.on();
    ledGreen.on();
    ledRed.off();
    return "OK";
  }
  if (IsRangeReset == false) {

    IsRangeReset = true;
  }

  if (input > 600000) {
    // OFF LED ALL
    ledMes.off();
    ledGreen.off();
    ledRed.off();
    return "Out";
  }
  ledMes.off();
  ledGreen.off();
  ledRed.on();
  return "Out";
}

bool IsRange(float input, float min, float max) {
  if (input > min && input < max) {
    return true;
  }
  return false;
}


void DisplaySettings() {
  lcd.noCursor();
  lcd.noBlink();
  lcd.clear();
  switch (setings) {
    case TIME:
      DisplayTime();
      break;
    case DATE:
      DisplayDate();
      break;
    case RANGE:
      DisplayRange();
      break;
    case MIN:
      DisplayMin();
      break;
    case MAX:
      DisplayMax();
      break;
    default:
      setings = TIME;
      break;
  }
}
void DisplayTime() {
  switch (pages) {
    case Index:
      lcd.setCursor(0, 0);
      lcd.print(">Time");
      lcd.setCursor(0, 1);
      lcd.print(" Date");
      break;
    case Get:
      t = rtc.getTime();
      day = t.date;
      month = t.mon;
      year = t.year;
      hour = t.hour;
      minute = t.min;
      second = t.sec;
      pages = Show;
      IsChangeMenu = true;
      // goto case Show;
      break;
    case Show:
      lcd.setCursor(0, 0);
      lcd.print("Time: ");
      lcd.print(hour);
      lcd.print(":");
      lcd.print(minute);
      lcd.print(":");
      lcd.print(second);
      lcd.setCursor(0, 1);
      lcd.print("Date: ");
      lcd.print(day);
      lcd.print("/");
      lcd.print(month);
      lcd.print("/");
      lcd.print(year);
      break;

    case Hour:
      lcd.setCursor(0, 0);
      lcd.blink();
      lcd.cursor();
      lcd.print("SET Hour: ");
      lcd.print(hour);
      lcd.print(" ");
      break;
    case Minute:
      lcd.setCursor(0, 0);
      lcd.blink();
      lcd.cursor();
      lcd.print("SET Minute: ");
      lcd.print(minute);
      lcd.print(" ");
      break;
    case Second:
      lcd.blink();
      lcd.cursor();
      lcd.setCursor(0, 0);
      lcd.print("SET Second: ");
      lcd.print(second);
      lcd.print(" ");
      break;
    case Save:
      // SET TIME
      rtc.setTime(hour, minute, second);
      lcd.setCursor(0, 0);
      // off brink and cursor
      lcd.noBlink();
      lcd.noCursor();
      lcd.print("Saving...");
      delay(1000);
      pages = Show;
      IsChangeMenu = true;
      break;
  }
}

void DisplayDate() {
  switch (pages) {
    case Index:
      lcd.setCursor(0, 0);
      lcd.print(" Time");
      lcd.setCursor(0, 1);
      lcd.print(">Date");
      break;
    case Get:
      t = rtc.getTime();
      day = t.date;
      month = t.mon;
      year = t.year;
      hour = t.hour;
      minute = t.min;
      second = t.sec;
      pages = Show;
      IsChangeMenu = true;
      // goto case Show;
      break;
    case Show:
      lcd.setCursor(0, 0);
      lcd.print("Time: ");
      lcd.print(hour);
      lcd.print(":");
      lcd.print(minute);
      lcd.print(":");
      lcd.print(second);
      lcd.setCursor(0, 1);
      lcd.print("Date: ");
      lcd.print(day);
      lcd.print("/");
      lcd.print(month);
      lcd.print("/");
      lcd.print(year);
      break;
    case Day:
      lcd.setCursor(0, 0);
      lcd.blink();
      lcd.cursor();
      lcd.print("SET Day: ");
      lcd.print(day);
      lcd.print(" ");
      break;
    case Month:
      lcd.setCursor(0, 0);
      lcd.blink();
      lcd.cursor();
      lcd.print("SET Month: ");
      lcd.print(month);
      lcd.print(" ");
      break;
    case Year:
      lcd.setCursor(0, 0);
      lcd.blink();
      lcd.cursor();
      lcd.print("SET Year: ");
      lcd.print(year);
      lcd.print(" ");
      break;
    case Save:
      // SET TIME
      rtc.setDate(day, month, year);
      lcd.setCursor(0, 0);
      // off brink and cursor
      lcd.noBlink();
      lcd.noCursor();
      lcd.print("Saving...");
      delay(1000);
      pages = Show;
      IsChangeMenu = true;
      break;
  }
}
uint8_t IsBuzzerSelect = false;
int _min = 0;
void DisplayRange() {
  switch (pages) {
    case Index:
      _min = dataProgram.MinResistance;
      lcd.setCursor(0, 0);
      lcd.print(">BUZZER : " + GetBuzzer());
      lcd.setCursor(0, 1);
      lcd.print(" MIN :" + String(_min));
      break;
    case ON:
      lcd.setCursor(0, 0);
      lcd.print(">ON");
      lcd.setCursor(0, 1);
      lcd.print(" OFF");
      IsBuzzerSelect = 1;
      break;
    case OFF:
      lcd.setCursor(0, 0);
      lcd.print(" ON");
      lcd.setCursor(0, 1);
      lcd.print(">OFF");
      IsBuzzerSelect = 0;
      break;
    case Save:
      lcd.setCursor(0, 0);
      lcd.print("Saving...");
      pages = Index;
      // IsBuzzer = select;
      dataProgram.IsBuzzer = IsBuzzerSelect;
      dataProgram.writeToSD();
      // writeLong(20, dataProgram.IsBuzzer);
      delay(1000);
      IsChangeMenu = true;
      break;
    default:
      break;
  }
}

void DisplayMin() {
  switch (pages) {
    case Index:
      lcd.setCursor(0, 0);
      lcd.print(" BUZZER : " + GetBuzzer());
      lcd.setCursor(0, 1);
      _min = dataProgram.MinResistance;
      lcd.print(">MIN :" + String(_min));
      break;
    case Set:
      lcd.setCursor(0, 0);
      lcd.print("SET MIN :");
      lcd.setCursor(0, 1);
      lcd.cursor();
      lcd.blink();
      lcd.print(_min);
      break;
    case Save:
      lcd.setCursor(0, 0);
      lcd.print("Saving...");
      pages = Index;
      // IsBuzzer = select;
      dataProgram.MinResistance = _min;
      dataProgram.writeToSD();
      // writeLong(0, dataProgram.MinResistance);
      delay(1000);
      IsChangeMenu = true;
      break;
  }
}

int _max = 0;
void DisplayMax() {
  switch (pages) {
    case Index:
      _max = dataProgram.MaxResistance;
      lcd.setCursor(0, 0);
      lcd.print(">MAX :" + String(_max));
      lcd.setCursor(0, 1);
      lcd.print(" ");
      break;
    case Set:
      lcd.setCursor(0, 0);
      lcd.print("SET MAX :");
      lcd.setCursor(0, 1);
      lcd.cursor();
      lcd.blink();
      lcd.print(_max);
      break;
    case Save:
      lcd.setCursor(0, 0);
      lcd.print("Saving...");
      pages = Index;
      // IsBuzzer = select;
      dataProgram.MaxResistance = _max;
      // writeLong(4, dataProgram.MaxResistance);
      dataProgram.writeToSD();
      delay(1000);
      IsChangeMenu = true;
      break;
  }
}

String GetBuzzer() {
  if (dataProgram.IsBuzzer == 1) {
    return "ON";
  }
  return "OFF";
}

// -------------------- FUNCTION -------------------- //
void BUTTON_PUSHES(BUTTON_STATE button) {
  countUseMenu = 0;
  switch (button) {
    case ESC:
      Serial.println("ESC");
      if (display == Home) {
        display = Settings;
        pages = Index;
      } else if (display == Settings) {
        if (pages != Index) {
          pages = Index;
        } else {
          display = Home;
        }
      }
      lcd.clear();
      break;
    case ENTER:

      if (display == Settings) {
        switch (setings) {
          case TIME:
            if (pages == Index) {
              Serial.println("Index -> Get");
              pages = Get;
            } else if (pages == Show) {
              Serial.println("Show -> Hour");
              pages = Hour;
            } else if (pages == Hour) {
              Serial.println("Hour -> Minute");
              pages = Minute;
            } else if (pages == Minute) {
              Serial.println("Minute -> Second");
              pages = Second;
            } else if (pages == Second) {
              Serial.println("Second -> Save");
              pages = Save;
            } else if (pages == Save) {
              pages = None;
            }
            break;
          case DATE:
            if (pages == Index) {
              pages = Get;
            } else if (pages == Show) {
              pages = Day;
            } else if (pages == Day) {
              pages = Month;
            } else if (pages == Month) {
              pages = Year;
            } else if (pages == Year) {
              pages = Save;
            } else if (pages == Save) {
              pages = None;
            }
            break;
          case RANGE:
            if (pages == Index) {
              if (dataProgram.IsBuzzer == 1) {
                pages = ON;
              } else {
                pages = OFF;
              }
            } else if (pages == ON || pages == OFF) {
              pages = Save;
            } else if (pages == Save) {
              pages = Index;
            }
            break;

          case MIN:
            if (pages == Index) {
              pages = Set;
            } else if (pages == Set) {
              pages = Save;
            } else if (pages == Save) {
              pages = Index;
            }
            break;
          case MAX:
            if (pages == Index) {
              pages = Set;
            } else if (pages == Set) {
              pages = Save;
            } else if (pages == Save) {
              pages = Index;
            }
            break;
          default:
            break;
        }
      }
      break;
    case UP:

      if (pages == Index) {
        switch (setings) {
          case TIME:
            setings = MAX;
            break;
          case DATE:
            setings = TIME;
            break;
          case RANGE:
            setings = DATE;
            break;
          case MIN:
            setings = RANGE;
            break;
          case MAX:
            setings = MIN;
            break;
          default:
            break;
        }
      } else {
        switch (setings) {
          case TIME:
            switch (pages) {
              case Hour:
                if (hour < maxHour) {
                  hour++;
                } else {
                  hour = minHour;
                }
                break;
              case Minute:
                if (minute < maxMinute) {
                  minute++;
                } else {
                  minute = minMinute;
                }
                break;
              case Second:
                if (second < maxSecond) {
                  second++;
                } else {
                  second = minSecond;
                }
                break;
              default:
                break;
            }
            break;
          case DATE:
            switch (pages) {
              case Day:
                if (day < maxDay) {
                  day++;
                } else {
                  day = minDay;
                }
                break;
              case Month:
                if (month < maxMonth) {
                  month++;
                } else {
                  month = minMonth;
                }
                break;
              case Year:
                if (year < maxYear) {
                  year++;
                } else {
                  year = minYear;
                }
                break;
              default:
                break;
            }
            break;
          case RANGE:
            switch (pages) {
              case ON:
                pages = OFF;
                break;
              case OFF:
                pages = ON;
                break;
              default:
                break;
            }
            break;
          case MIN:
            switch (pages) {
              case Set:
                _min++;
                break;
              default:
                break;
            }
            break;

          case MAX:
            switch (pages) {
              case Set:
                _max++;
                break;
              default:
                break;
            }
            break;
          default:
            break;
        }
        IsChangeMenu = true;
      }
      Serial.println("UP");
      break;
    case DOWN:
      if (pages == Index) {
        switch (setings) {
          case TIME:
            setings = DATE;
            break;
          case DATE:
            setings = RANGE;
            break;
          case RANGE:
            setings = MIN;
            break;
          case MIN:
            setings = MAX;
            break;
          case MAX:
            setings = TIME;
            break;
          default:
            break;
        }
      } else {
        switch (setings) {
          case TIME:
            switch (pages) {
              case Hour:
                if (hour > minHour) {
                  hour--;
                } else {
                  hour = maxHour;
                }
                break;
              case Minute:
                if (minute > minMinute) {
                  minute--;
                } else {
                  minute = maxMinute;
                }
                break;
              case Second:
                if (second > minSecond) {
                  second--;
                } else {
                  second = maxSecond;
                }
                break;
              default:
                break;
            }
            break;
          case DATE:
            switch (pages) {
              case Day:
                if (day > minDay) {
                  day--;
                } else {
                  day = maxDay;
                }
                break;
              case Month:
                if (month > minMonth) {
                  month--;
                } else {
                  month = maxMonth;
                }
                break;
              case Year:
                if (year > minYear) {
                  year--;
                } else {
                  year = maxYear;
                }
                break;
              default:
                break;
            }
            break;
          case RANGE:
            switch (pages) {
              case ON:
                pages = OFF;
                break;
              case OFF:
                pages = ON;
                break;
              default:
                break;
            }
            break;
          case MIN:
            switch (pages) {
              case Set:
                _min--;
                if (_min < 0) {
                  _min = 0;
                }
                break;
              default:
                break;
            }
            break;
          case MAX:
            switch (pages) {
              case Set:
                _max--;
                if (_max < 0) {
                  _max = 0;
                }
                break;
              default:
                break;
            }
            break;

          default:
            break;
        }
        IsChangeMenu = true;
      }
      Serial.println("DOWN");
      break;
    default:
      break;
  }
}
String GetStatus() {
  String status = "";

  switch (display) {
    case Home:
      status = "Home";
      break;
    case Settings:
      status = "Settings";
      break;
    default:
      break;
  }

  switch (setings) {
    case TIME:
      status += "Time";
      break;
    case DATE:
      status += "Date";
      break;
    case RANGE:
      status += "Range";
      break;
    default:
      break;
  }

  switch (pages) {
    case Index:
      status += " Index";
      break;
    case Get:
      status += " Get";
      break;
    case Show:
      status += " Show";
      break;
    case Hour:
      status += " Hour";
      break;
    case Minute:
      status += " Minute";
      break;
    case Second:
      status += " Second";
      break;
    case Day:
      status += " Day";
      break;
    case Month:
      status += " Month";
      break;
    case Year:
      status += " Year";
      break;
    case Save:
      status += " Save";
      break;
    case None:
      status += " None";
      break;
    default:
      break;
  }

  return status;
}

// -------------------- Button Esc --------------------
void ButtonEscPressed(void) {
  BUTTON_PUSHES(ESC);
  currentButtonState = BUTTON_STATE::ESC;
  IsPress = true;
  countPress = 0;
  Serial.println("ButtonEscPressed: ");
}

void ButtonEscReleased(void) {
  IsPress = false;
}

// -------------------- Button Enter --------------------
void ButtonEnterPressed(void) {
  BUTTON_PUSHES(ENTER);
  currentButtonState = BUTTON_STATE::ENTER;
  IsPress = true;
  countPress = 0;
}

void ButtonEnterReleased(void) {
  IsPress = false;
}
// -------------------- Button Up --------------------
void ButtonUpPressed(void) {
  BUTTON_PUSHES(UP);
  currentButtonState = BUTTON_STATE::UP;
  IsPress = true;
  countPress = 0;
}

void ButtonUpReleased(void) {
  IsPress = false;
}
// -------------------- Button Down --------------------
void ButtonDownPressed(void) {
  BUTTON_PUSHES(DOWN);
  currentButtonState = BUTTON_STATE::DOWN;
  IsPress = true;
  countPress = 0;
}

void ButtonDownReleased(void) {
  IsPress = false;
}

void UpdateDateTime() {
  t = rtc.getTime();
  day = t.date;
  month = t.mon;
  year = t.year;
  hour = t.hour;
  minute = t.min;
  second = t.sec;
}
